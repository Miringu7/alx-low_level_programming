!<arch>
0-isupper.c/    0           0     0     644     284       `
#include "main.h"

/**
  * _isupper - checks for uppercase characters
  * Description: returns value if c is uppercase
  * @c: the number computed
  * Return: returns 1 if uppercase and 0 if not
  */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     321       `
#include "main.h"

/**
 * _memset - function that fills memory with a constant byte
 * @s: function parameter buffer
 * @b: constant byte to print
 * @n: bytes of memory
 * Return: Nothing.
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}

0-putchar.c/    0           0     0     644     289       `
#include "main.h"
#include <string.h>

/**
  * main - this is a function printing "_putchar"
  * Return: Always 0
  */

int main(void)
{
	const char *message = "_putchar\n";
	int i;
	int meslen = strlen(message);

	for (i = 0; i < meslen; i++)
	{
		_putchar(message[i]);
	}
	return (0);
}

0-strcat.c/     0           0     0     644     386       `
#include "main.h"

/**
  * _strcat - function that concatenate two strings
  * @dest: function parameter1
  * @src: function parameter2
  * Return: returns dest
  */

char *_strcat(char *dest, char *src)
{
	int i, destlen = 0;

	for (i = 0; dest[i] != '\0'; i++)
		destlen++;
	for (i = 0; src[i] != '\0'; i++)
		dest[destlen + i] = src[i];
	dest[destlen + i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     296       `
#include "main.h"

/**
  * _atoi - convert a string to an integer
  * @s: function parameter
  * Return: returns 0 
  */

int _atoi(char *s)
{
	int i, sign = 0, count = 0;

	for (i = 0; s[i] != 0; i++)
		count++;
	for (i = 0; s[i] < count; i++)
	{
		if (s[i] == '-')
			sign++;
	}
	return (0);
}
1-isdigit.c/    0           0     0     644     241       `
#include "main.h"

/**
  * _isdigit - checks for a digit (0 through 9).
  * @c: function parameter
  * Return: returns 1 if c is a digit and 0 if not
  */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     309       `
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: destination area
 * @src: source area
 * @n: bytes of memory
 *
 * Return: returns destination.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     447       `
#include "main.h"

/**
  * _strncat - main function concatenates two strings
  * @dest: function parameter 1
  * @src: function parameter 2
  * @n: function parameter 3
  * Return: returns dest
  */

char *_strncat(char *dest, char *src, int n)
{
	int i, destlen = 0;

	for (i = 0; dest[i] != '\0'; i++)
		destlen++;
	for (i = 0; i < n && *src != '\0'; i++)
	{
		dest[destlen + i] = *src;
		src++;
	}
	dest[destlen + i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     333       `
#include "main.h"

/**
 * _strchr - function that locates a character in a string
 * @s: string
 * @c: first occurrence of character in string s
 *
 * Return: returns s. NULL if c is not found.
*/

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] >= '\0')
	{
		if (s[i] == c)
			return (&s[i]);
		i++;
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     248       `
#include "main.h"

/**
  * _strlen - returns the length of a string.
  * @s: function parameter
  * Return: returns sizeof a string
  */

int _strlen(char *s)
{
	int count = 0;
	int i;

	for (i = 0; s[i] != '\0'; i++)
		count++;
	return (count);
}
2-strncpy.c/    0           0     0     644     372       `
#include "main.h"

/**
  * _strncpy - function that copies a string
  * @dest: function parameter1
  * @src: function parameter2
  * @n: function parameter3
  * Return: returns dest
  */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     284       `
#include "main.h"

/**
 * _islower - entry point
 * Description: function that checks for lowercase character
 * @c:character to check if it islowercase
 * Return: 0-if lowercase, 1-if not
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
		return (0);
}
3-puts.c/       0           0     0     644     265       `
#include "main.h"
#include <unistd.h>

/**
  * _puts - prints a string, followed by a new line
  * @str: function parameter
  * Return: returns nothing
  */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
		_putchar(str[i]);
	_putchar('\n');

}

3-strcmp.c/     0           0     0     644     411       `
#include "main.h"

/**
  * _strcmp - function that compares two strings
  * @s1: function parameter1
  * @s2: function parameter2
  * Return: returns 0
  */

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] - s2[i] != 0)
		{
			if (s1[i] < s2[i])
				return (s1[i] - s2[i]);
			else if (s1[i] > s2[i])
				return (s1[i] - s2[i]);
		}
	}
	return (0);
}

3-strspn.c/     0           0     0     644     448       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: string
 * @accept: bytes of memory to get from s
 *
 * Return: returns length of initial segment of s.
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				n++;
				break;
			}
			else if (accept[i + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     216       `
#include "main.h"

/**
 * _isalpha - Checks charcter
 * @c: The charceter
 * Return: 1 for all
 */

int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     279       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
*/
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
		if (*s == accept[i])
		return (s);
		}
	s++;
	}
	return ('\0');
}


5-strstr.c/     0           0     0     644     366       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     222       `
#include "main.h"


/**
 * _abs - Computers the absolute
* @c: The number computed
 * Return: Absolute value
 */
int _abs(int c)
{
	if (c < 0)
	{
		int abs_val;


		abs_val = c * -1;
		return (abs_val);
	}
	return (c);
}

9-strcpy.c/     0           0     0     644     405       `
#include "main.h"
#include <stdio.h>

/**
  * _strcpy - copies the string pointed to by src
  * @dest: function parameter
  * @src: function parameter
  * Return: returns parameter dest
  */

char *_strcpy(char *dest, char *src)
{
	int i, strlength, count = 0;

	for (i = 0; src[i] != '\0'; i++)
		count++;

	strlength = count + 1;

	for (i = 0; i < strlength; i++)
		dest[i] = src[i];

	return (dest);
}

main.c/         0           0     0     644     208       `
#include "main.h"

/**
  * main - main function
  * Return: returns void
  */

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

